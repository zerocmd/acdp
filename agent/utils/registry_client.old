import requests
import logging

logger = logging.getLogger(__name__)


class RegistryClient:
    """Client for interacting with the central registry"""

    def __init__(self, base_url):
        self.base_url = base_url
        logger.info(f"Initialized registry client with base URL: {base_url}")

    def register_agent(self, agent_data):
        """Register an agent with the registry"""
        logger.info(f"Registering agent {agent_data.get('id')} with registry")
        try:
            response = requests.post(
                f"{self.base_url}/registerAgent", json=agent_data, timeout=10
            )
            response.raise_for_status()
            logger.info(f"Successfully registered agent with registry")
            return response.json()
        except Exception as e:
            logger.error(f"Error registering with registry: {str(e)}")
            if hasattr(e, "response") and e.response:
                logger.error(f"Response status: {e.response.status_code}")
                logger.error(f"Response content: {e.response.text}")
            raise

    def get_agents(self, capability=None):
        """Get all agents or filter by capability"""
        logger.info(f"Fetching agents from registry")
        url = f"{self.base_url}/agents"
        if capability:
            url += f"?capability={capability}"

        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"Error fetching agents: {str(e)}")
            if hasattr(e, "response") and e.response:
                logger.error(f"Response status: {e.response.status_code}")
                logger.error(f"Response content: {e.response.text}")
            return {"agents": []}

    def get_agent(self, agent_id):
        """Get a specific agent by ID"""
        logger.info(f"Fetching agent {agent_id} from registry")
        try:
            response = requests.get(f"{self.base_url}/agents/{agent_id}", timeout=10)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"Error fetching agent {agent_id}: {str(e)}")
            if hasattr(e, "response") and e.response:
                logger.error(f"Response status: {e.response.status_code}")
                logger.error(f"Response content: {e.response.text}")
            raise

    def heartbeat(self, agent_id):
        """Send a heartbeat for an agent"""
        logger.debug(f"Sending heartbeat for agent {agent_id}")
        try:
            response = requests.put(
                f"{self.base_url}/agents/{agent_id}/heartbeat", timeout=5
            )

            # If we get a 404, the agent might not be registered yet
            if response.status_code == 404:
                logger.warning(
                    f"Agent {agent_id} not found in registry. Attempting to re-register."
                )
                return {"status": "not_found", "message": "Agent not found in registry"}

            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"Error sending heartbeat for agent {agent_id}: {str(e)}")
            if hasattr(e, "response") and e.response:
                logger.error(f"Response status: {e.response.status_code}")
                logger.error(f"Response content: {e.response.text}")
            return {"status": "error", "message": str(e)}

    def unregister_agent(self, agent_id):
        """Unregister an agent from the registry"""
        logger.info(f"Unregistering agent {agent_id} from registry")
        try:
            response = requests.delete(f"{self.base_url}/agents/{agent_id}", timeout=10)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"Error unregistering agent {agent_id}: {str(e)}")
            if hasattr(e, "response") and e.response:
                logger.error(f"Response status: {e.response.status_code}")
                logger.error(f"Response content: {e.response.text}")
            raise
